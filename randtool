#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright (C) 2016 by Björn Edström <be@bjrn.se>
# See LICENSE for details.

import Crypto.Cipher.AES as AES
import argon2
import argparse
import base64
import binascii
import hashlib
import getpass
import os
try:
    import scrypt
    HAS_SCRYPT = True
except ImportError:
    HAS_SCRYPT = False
import struct
import sys


def inc_bytarray(arr, wrap=False):
    pos = -1
    while True:
        try:
            arr[pos] += 1
            break
        except ValueError:
            arr[pos] = 0
            pos -= 1
        except IndexError:
            if wrap:
                arr = bytearray(len(arr))
                break
            else:
                raise ValueError('at max value')
    return arr


def xorstr(a, b):
    c = bytearray()
    for i in range(len(a)):
        c.append(a[i] ^ b[i])
    return c


def counter(i):
    assert i < 2**64
    return bytearray(struct.pack('!QQ', 0, i))


def ba2int(ba):
    i = 0
    for b in ba:
        i <<= 8
        i |= b
    return i


class Maker(object):
    pass


class Source(object):
    def __init__(self):
        self.buf = bytearray(0)

    def get_bytes(self, n):
        # buffer up
        while len(self.buf) < n:
            self.buf += self.get_block()

        try:
            return self.buf[0:n]
        finally:
            self.buf = self.buf[n:]

    def get_bits(self, n):
        # Note: this will waste some bits.

        bytes = self.get_bytes((n + 7) // 8)
        upper_mask = 2 ** (n % 8) - 1
        bytes[0] &= upper_mask
        return bytes

    def get_all_bytes(self, num):
        while num > 0:
            chunk = min(num, self.BLOCK_SIZE)
            block = self.get_block()
            yield block[0:chunk]
            num -= self.BLOCK_SIZE

    def get_integer(self, upper):
        integer = upper
        while integer >= upper:
            integer = ba2int(self.get_bits(upper.bit_length()))
        return integer

    def get_float(self):
        # From python random.py
        BPF = 53
        RECIP_BPF = 2**-BPF
        return (int(binascii.hexlify(self.get_bytes(7)), 16) >> 3) * RECIP_BPF


class AESCounterMode(Source):
    BLOCK_SIZE = 16

    def __init__(self, key, iv):
        Source.__init__(self)

        self.key = key
        self.iv = iv
        self.ctr = bytearray(iv)
        self.aes = AES.new(key)

    def get_block(self):
        try:
            return bytearray(self.aes.encrypt(bytes(self.ctr)))
        finally:
            inc_bytarray(self.ctr, wrap=True)


class URandom(Source):
    BLOCK_SIZE = 16

    def __init__(self):
        Source.__init__(self)

    def get_block(self):
        return os.urandom(self.BLOCK_SIZE)


class KeyMaterializer(object):
    def __init__(self):
        self.key = None
        self.salt = None


class ScryptKeyMaterializer(KeyMaterializer):
    NAME = 'scrypt'
    ARGS = ['salt']
    PASSWORD = True

    def __init__(self):
        KeyMaterializer.__init__(self)

    def materialize(self, args, num):
        passw = getpass.getpass('Password: ')
        salt = args.salt
        scrypt_buf = scrypt.hash(passw, salt, N=2**16, buflen=num)
        #self.key = scrypt_buf[0:16]
        #self.iv = bytearray(scrypt_buf[16:32])


class Transformer(object):
    def __init__(self, size):
        self.size = size

    def transform(self, obj, outfd):
        for out in obj.get_all_bytes(self.size):
            outfd.write(out)



class HexTransformer(Transformer):
    def __init__(self, size):
        self.size = size

    def transform(self, obj, outfd):
        for out in obj.get_all_bytes(self.size):
            outfd.write(binascii.hexlify(out))


class IntegerTransformer(Transformer):
    def __init__(self, num, bound):
        self.num = num

        try:
            if '-' in bound:
                bound_str = bound.split('-')
                self.lower, self.upper = int(bound_str[0]), int(bound_str[1])
            else:
                self.lower = 0
                self.upper = int(bound)
        except Exception as e:
            raise Exception('parse error: %s' % (bound,))

    def transform(self, obj, outfd):
        # XXX: This can be improved. See OpenSSL BN_rand_range()
        for i in range(self.num):
            integer = self.lower + obj.get_integer(self.upper - self.lower)
            outfd.write(('%s\n' % (integer,)).encode('utf-8'))


class FloatTransformer(Transformer):
    def __init__(self, num):
        self.num = num

    def transform(self, obj, outfd):
        for i in range(self.num):
            random_float = obj.get_float()
            outfd.write(('%s\n' % (random_float,)).encode('utf-8'))


class ChoiceTransformer(Transformer):
    def __init__(self, choices):
        self.choices = choices
        self.upper = len(choices)

    def transform(self, obj, outfd):
        integer = obj.get_integer(self.upper)
        outfd.write(('%s\n' % (self.choices[integer],)).encode('utf-8'))


class XorTransformer(Transformer):
    def __init__(self, size, infd, inplace):
        self.size = size
        self.infd = infd
        self.inplace = inplace

    def transform(self, obj, outfd):
        for out in obj.get_all_bytes(self.size):

            if self.inplace:
                file_pos = outfd.tell()
                content = bytearray(outfd.read(len(out)))
                outfd.seek(file_pos, 0)
                new_content = (xorstr(out, content))
                out = new_content
            else:
                content = bytearray(self.infd.read(len(out)))
                out = xorstr(out, content)

            outfd.write(out)

        if not self.inplace:
            while True:
                content = self.infd.read(4096)
                if not content:
                    break
                outfd.write(content)


def parse_phc_params(params):
    res = {}
    for field in params.split(','):
        k,v = field.split('=')
        res[k] = int(v)
    return res


def main():
    parser = argparse.ArgumentParser()

    sources_opt_group = parser.add_argument_group('randomness sources')
    sources_group = sources_opt_group.add_mutually_exclusive_group(required=True)
    sources_group.add_argument('-r', '--random', action='store_true',
                               help='use non-deterministic randomness')
    sources_group.add_argument('-s', '--seed', metavar='SEED',
                               help='use randomness from seed')
    sources_group.add_argument('-p', '--password', action='store_true',
                               help='use randomness seeded by strengthened password/salt')

    parser.add_argument('-n', '--num', type=int, metavar='NUM', help='output size')
    parser.add_argument('-o', '--output', metavar='PATH|inplace', help='output to write [stdout]', default='-')
    parser.add_argument('args', metavar='ARGS', nargs='*',
                   help='arguments')

    transformers_group = parser.add_argument_group('transformers')
    transformers_group.add_argument(
        '-x', '--xor', metavar='PATH', help='data encryption (use -p)')

    transformers_group.add_argument('-H', '--hex', action='store_true',
                                    help='output as hex string')
    transformers_group.add_argument('-I', '--integer',
                                    help='output as integers')
    transformers_group.add_argument('-F', '--float', action='store_true',
                                    help='output as floats [0,1)')
    transformers_group.add_argument('-C', '--choice', action='store_true',
                                    help='output as integers')

    sources_opt_group.add_argument('--salt', metavar='SALT', default='randtool',
                                   help='salt used to contextualize password strenghtening [%(default)s]')
    ph_alg_choices = ['argon2i']
    if HAS_SCRYPT:
        ph_alg_choices.append('scrypt')
    sources_opt_group.add_argument('--ph-alg', default='argon2i', choices=ph_alg_choices,
                                   help='password hashing algorithm to use [%(default)s]')
    sources_opt_group.add_argument('--argon2i-params', metavar='PARAMS', default='t=32,m=12,p=1',
                                   help='argon2i parameters [%(default)s]')
    sources_opt_group.add_argument('--scrypt-params', metavar='PARAMS', default='N=16',
                                   help='scrypt parameters [%(default)s]')

    args = parser.parse_args()

    if args.random:
        source = URandom()
    else:
        # Set up crypto stuff.
        if args.seed:
            passw = args.seed
        else:
            passw = getpass.getpass('Password: ')
        salt = hashlib.sha256(args.salt.encode('utf-8')).digest()

        # Set up PHC
        use_argon2i = not ('scrypt' == args.ph_alg and HAS_SCRYPT)

        try:
            if use_argon2i:
                params = parse_phc_params(args.argon2i_params)
            else:
                params = parse_phc_params(args.scrypt_params)

        except Exception as e:
            parser.error('parse error: %s' % (args.argon2i_params if use_argon2i else args.scrypt_params,))

        if 'scrypt' == args.ph_alg and HAS_SCRYPT:
            scrypt_buf = scrypt.hash(passw, salt, N=2**params['N'], buflen=32)
            key = scrypt_buf[0:16]
            iv = bytearray(scrypt_buf[16:32])
        else:
            argon2_buf = argon2.argon2_hash(passw, salt[0:16], t=params['t'], m=params['m'], p=params['p'], buflen=32)
            key = argon2_buf[0:16]
            iv = bytearray(argon2_buf[16:32])

        source = AESCounterMode(key, iv)

    # Figure out output size
    if args.num:
        size = args.num
    elif args.xor:
        size = os.stat(args.xor).st_size
    elif args.choice:
        if not args.args:
            parser.error('no arguments given')
    else:
        parser.error('no --num given')

    #
    if args.xor:
        if args.random:
            parser.error('--xor with --random is ill advised')
        xorfd = open(args.xor, 'r+b')

    # Figure out file to write
    inplace_write = False
    if args.output == '-':
        if sys.version_info[0] >= 3:
            outfd = sys.stdout.buffer
        else:
            outfd = sys.stdout
    elif args.output == 'inplace':
        if not args.xor:
            parser.error('-o inplace requires -x')
        outfd = xorfd
        inplace_write = True
    else:
        outfd = open(args.output, 'wb')

    try:
        if args.hex:
            transformer = HexTransformer(size)
        elif args.xor:
            transformer = XorTransformer(size, xorfd, inplace_write)
        elif args.integer:
            transformer = IntegerTransformer(args.num, args.integer)
        elif args.float:
            transformer = FloatTransformer(args.num)
        elif args.choice:
            transformer = ChoiceTransformer(args.args)
        else:
            transformer = Transformer(size)
    except Exception as e:
        parser.error(e)

    transformer.transform(source, outfd)

    sys.exit(0)


if __name__ == '__main__':
    main()
